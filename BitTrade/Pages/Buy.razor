@page "/buy"
@using BitTrade.DataAccess;
@using BitTrade.Methods;
@using BitTrade.Model;
@using BitTrade.RequestPayload;
@using BitTrade.Services;
@using Radzen.Blazor;
@using Microsoft.JSInterop;


@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject DialogService ds
@inject NotificationService NotificationService
@inject ITransactionService _ts;
@inject CurrencyInfoService currencyInfoService;
@inject TooltipService tooltipService;
@inject BitCoinConverter btcConverter;
@inject IJSRuntime jSRuntime;


<Animation>
    <div Class="rz-p-0 rz-p-md-12">
        <RadzenTemplateForm TItem="PaymentRequest" Data=@transaction Submit=@OnSubmit>
            <RadzenCard class="my-5 mx-auto  rz-shadow-5 rz-border-radius-6" Style="max-width: 800px;">
                <RadzenStack Gap="1rem" Class="rz-p-sm-12 ">
                    <RadzenText TextStyle="TextStyle.DisplayH3" TextAlign="TextAlign.Center"><strong>Buy</strong></RadzenText>
                    <RadzenFormField Text="Name" Variant="@variant">
                        <Start>
                            <RadzenIcon Icon="person" />
                        </Start>
                        <ChildContent>
                            <RadzenTextBox Name="Name" @bind-Value=@transaction.Name />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="Name" Text="Name is required." />
                        </Helper>
                    </RadzenFormField>

                    <RadzenFormField Text="Email" Variant="@variant">
                        <Start>
                            <RadzenIcon Icon="email" />
                        </Start>
                        <ChildContent>
                            <RadzenTextBox Name="Email" @bind-Value=@transaction.Email />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="Email" Text="Email is required." />
                        </Helper>
                    </RadzenFormField>

                    <RadzenFormField Text="Bitcoin Address" Variant="@variant">
                        <Start>
                            <RadzenIcon Icon="account_balance_wallet" />
                        </Start>
                        <ChildContent>
                            <RadzenTextBox Name="Bitcoin Address" @bind-Value=@transaction.BitcoinAddress />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="Bitcoin Address" Text="Bitcoin Address is required." />
                        </Helper>
                    </RadzenFormField>

                    <RadzenRow class="">
                        <RadzenColumn Size="12" SizeXS="12" SizeSM="11" SizeMD="10" SizeLG="9" SizeXL="8" SizeXX="7" class="row-cols-xxl-1 input-container">
                            <RadzenFormField Text="Amount" Variant="@variant">
                                <Start>
                                    <RadzenIcon Icon="wallet" />
                                </Start>
                                <ChildContent>
                                    <RadzenNumeric ShowUpDown="true" TValue="double" Format="n" @oninput=@(args => OnChange(args.Value.ToString())) @bind-Value=@transaction.Amount />
                                </ChildContent>
                                <End>
                                    <RadzenDropDownDataGrid MouseEnter="@(args => ShowTooltip(args) )" AllowClear="false" AllowVirtualization="true" Name="DropDownVirtualization"
                                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFilteringByAllStringColumns="true"
                                                            @bind-Value=@selectedCurrency Data=@currencies TextProperty="Code" ValueProperty="Code" @oninput="OnSelectorChange"
                                                            Style="width: 100%; max-width: 150px; left: 12px; font-weight: 900; cursor: pointer">

                                        <Columns>
                                            <RadzenDropDownDataGridColumn Property="Code" Title="Code" Width="100px" />
                                            <RadzenDropDownDataGridColumn Property="Name" Title="Currency" Width="200px" />
                                        </Columns>
                                    </RadzenDropDownDataGrid>
                                </End>
                                @*<Helper>
                                <RadzenRequiredValidator Component="LastName" Text="Last name is required." />
                                </Helper>*@
                            </RadzenFormField>
                        </RadzenColumn>

                        <RadzenColumn Size="3" class="row-cols-xxl-1">
                            <RadzenFormField Text="Bit Amount" Variant="@variant">
                                <ChildContent>
                                    <RadzenNumeric Value="@bitAmount" Disabled="true" class="rz-color-primary rz-shadow-3 w-100" />
                                </ChildContent>
                            </RadzenFormField>
                        </RadzenColumn>

                    </RadzenRow>

                    <RadzenButton ButtonType="ButtonType.Submit" IsBusy=@busy Text="Submit"></RadzenButton>

                </RadzenStack>
            </RadzenCard>
        </RadzenTemplateForm>
    </div>
</Animation>

@*<EditForm Model="@transaction" OnValidSubmit="@OnSubmit">
    <InputText id="Name" @bind-Value="transaction.Name" />
    <InputText id="Email" @bind-Value="transaction.Email" />
    <InputNumber id="Amount" @bind-Value="transaction.Amount" />

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>*@

@code {
    bool busy = false;
    private string selectedCurrency;
    private List<CurrencyInfo> currencies;
    private string bitAmount;
    private string amountToconvert;

    List<string> countryCurrencies = new List<string>();

    Variant variant = Variant.Outlined;
    PaymentRequest transaction = new PaymentRequest();

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "Select Currency", options);

    private void OnClick(string text)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Button Clicked", Detail = text });
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadCurrencies();
    }

    private void OnChange(string amountValue)
    {
        double amount;

        try
        {
            amountToconvert = amountValue;
            amount = Convert.ToDouble(amountValue);
        }
        catch (Exception ex)
        {
            amountValue = "0";
            amount = Convert.ToDouble(amountValue);
        }

        if (selectedCurrency == "NGN")
        {
            var result = btcConverter.Convert(selectedCurrency, amount);
            string formattedResult = result.ToString("F16");
            bitAmount = formattedResult;
        }
    }

    private void OnSelectorChange()
    {
        double amount;
        amount = Convert.ToDouble(amountToconvert);

        if (selectedCurrency == "NGN")
        {
            var result = btcConverter.Convert(selectedCurrency, amount);
            string formattedResult = result.ToString("F16");
            bitAmount = formattedResult;
        }
    }

    private async Task LoadCurrencies()
    {
        const string apiUrl = "https://openexchangerates.org/api/currencies.json";
        var currenciesDictionary = await currencyInfoService.GetCurrencies(apiUrl);

        currencies = currenciesDictionary.Select(kv => new CurrencyInfo { Code = kv.Key, Name = kv.Value }).ToList();

        selectedCurrency = currencies.FirstOrDefault()?.Code;
    }

    private async void OnSubmit()
    {
        busy = true;
        var bitAmountInDouble = Convert.ToDouble(bitAmount);
        var formattedBitAmountInDouble = bitAmountInDouble.ToString("F16");
        var transactionBitAmount = Convert.ToDouble(formattedBitAmountInDouble);

        //await jSRuntime.InvokeVoidAsync("console.log", transactionBitAmount);

        var tr = new TransactionModel
            {
                Name = transaction.Name,
                Email = transaction.Email,
                Amount = transaction.Amount,
                BitcoinAddress = transaction.BitcoinAddress,
                BitcoinAmount = transaction.BitcoinAmount = transactionBitAmount,
            };

        if (selectedCurrency == "NGN")
        {
            await _ts.Payment(tr);
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Submit Failed", Detail = "" });
            busy = false;
        }
    }
}
